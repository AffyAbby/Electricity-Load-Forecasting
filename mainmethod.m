%data2 = fetchDBLoadData('2019-01-01', '2019-06-06');
load ISONECA_Data2.mat
[X, dates, labels] = genPredictors(data2, 'short');
y =  data2.System_Load;
% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 14-Aug-2022 20:01:36
%
% This script assumes these variables are defined:
%
%   X - input data.
%   y - target data.

x = X';
t = y';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainbr';  % Bayesian Regularization backpropagation.

% Create a Fitting Network
hiddenLayerSize = 30;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t);

% Test the Network
y2 = net(x);
e = gsubtract(t,y2);
performance = perform(net,t,y2);

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)
yPred = sim(net,X')';
plot(y,'DisplayName','y');hold on;plot(yPred,'DisplayName','yPred');hold off;
r = y(33497:39408)-yPred(33497:39408);
mape = nanmean(abs(r./y(33497:39408)*100))